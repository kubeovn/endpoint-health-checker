name: Publish Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v0.1.0)'
        required: true
        type: string
  schedule:
    - cron: "20 16 * * *"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: endpoint-health-checker

jobs:
  publish:
    name: Publish Images
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set version from input or VERSION file
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(cat VERSION)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Publishing version: $VERSION"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ env.VERSION }}
          type=raw,value=latest,enable={{ env.VERSION == cat VERSION }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dist/images/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create and push manifest (for multi-arch future)
      run: |
        echo "Creating manifest for ${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
        # Currently only single arch, but prepared for future multi-arch support
        docker manifest create ${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        docker manifest push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

        if [ "${{ env.VERSION }}" = "$(cat VERSION)" ]; then
          echo "Creating latest manifest"
          docker manifest create ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker manifest push ${{ env.IMAGE_NAME }}:latest
        fi

    - name: Generate release summary
      run: |
        echo "## 🚀 Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Images:" >> $GITHUB_STEP_SUMMARY
        echo "- \`docker.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.VERSION }}" = "$(cat VERSION)" ]; then
          echo "- \`docker.io/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Tags:" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.VERSION }}" = "$(cat VERSION)" ]; then
          echo "docker pull ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Usage:" >> $GITHUB_STEP_SUMMARY
        echo '```yaml' >> $GITHUB_STEP_SUMMARY
        echo 'image:' >> $GITHUB_STEP_SUMMARY
        echo '  repository: docker.io/'${{ env.IMAGE_NAME }} >> $GITHUB_STEP_SUMMARY
        echo '  tag: '${{ env.VERSION }} >> $GITHUB_STEP_SUMMARY
        echo '  pullPolicy: IfNotPresent' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY