name: Build and E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
    - 'docs/**'
    - '**.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: endpoint-health-checker

jobs:
  build:
    name: Build and Unit Tests
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Set up Go
      uses: actions/setup-go@v6
      id: setup-go
      with:
        go-version-file: go.mod
        check-latest: true
        cache: false

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ steps.setup-go.outputs.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ steps.setup-go.outputs.go-version }}-

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        args: --timeout=10m

    - name: Download dependencies
      run: go mod download

    - name: Run Unit Tests
      run: go test -v ./...

    - name: Build binary
      env:
        GO_VERSION: ${{ steps.setup-go.outputs.go-version }}
      run: |
        VERSION=$(cat VERSION | tr -d '\n')
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o dist/images/endpoint_health_checker ./main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: endpoint-health-checker-binary
        path: dist/images/endpoint_health_checker
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-24.04
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      id: setup-go
      with:
        go-version-file: go.mod
        check-latest: true
        cache: false

    - name: Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: |
        gosec -no-fail -fmt sarif -out results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-24.04
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: endpoint-health-checker-binary
        path: dist/images/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dist/images/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-24.04
    needs: build-image
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.19.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: test-cluster
        wait: 30s

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp/

    - name: Load Docker image into Kind cluster
      run: |
        VERSION=$(cat VERSION | tr -d '\n')
        docker load < /tmp/image.tar
        docker tag ${{ env.IMAGE_NAME }}:main endpoint_health_checker:$VERSION
        kind load docker-image endpoint_health_checker:$VERSION --name test-cluster

    - name: Install endpoint-health-checker using Helm
      run: |
        VERSION=$(cat VERSION | tr -d '\n')
        helm install endpoint-health-checker ./chart \
          --set image.repository=endpoint_health_checker \
          --set image.tag=$VERSION \
          --set image.pullPolicy=IfNotPresent \
          --namespace kube-system \
          --wait \
          --timeout=5m

    - name: Verify deployment
      run: |
        kubectl get pods -n kube-system -l app=endpoint-health-checker
        kubectl describe pods -n kube-system -l app=endpoint-health-checker

    - name: Check pod logs
      run: |
        kubectl logs -n kube-system -l app=endpoint-health-checker --tail=50

    - name: Run E2E test scenarios
      run: |
        echo "Running E2E tests..."

        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=endpoint-health-checker -n kube-system --timeout=300s

        # Test basic functionality
        echo "Testing basic functionality..."
        kubectl get pods -n kube-system -l app=endpoint-health-checker

        # Test health check endpoints if available
        echo "Testing health check endpoints..."
        POD_NAME=$(kubectl get pods -n kube-system -l app=endpoint-health-checker -o jsonpath='{.items[0].metadata.name}')
        if [ -n "$POD_NAME" ]; then
          kubectl exec -n kube-system $POD_NAME -- ps aux || echo "Process check completed"
        fi

        # Test configuration validation
        echo "Testing configuration validation..."
        kubectl get configmap -n kube-system || echo "ConfigMap check completed"

        echo "E2E tests completed successfully!"

    - name: Cleanup test resources
      if: always()
      run: |
        helm uninstall endpoint-health-checker --namespace kube-system || true
        kubectl delete namespace test-e2e-namespace || true

  push-image:
    name: Push Docker Image
    runs-on: ubuntu-24.04
    needs: e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp/

    - name: Load and push Docker image
      run: |
        VERSION=$(cat VERSION | tr -d '\n')
        docker load < /tmp/image.tar

        # Push images with multiple tags
        docker tag ${{ env.IMAGE_NAME }}:main ${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.IMAGE_NAME }}:main ${{ env.IMAGE_NAME }}:$VERSION
        docker tag ${{ env.IMAGE_NAME }}:main ${{ env.IMAGE_NAME }}:main

        docker push ${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.IMAGE_NAME }}:$VERSION
        docker push ${{ env.IMAGE_NAME }}:main

        echo "Successfully pushed images:"
        echo "  - ${{ env.IMAGE_NAME }}:latest"
        echo "  - ${{ env.IMAGE_NAME }}:$VERSION"
        echo "  - ${{ env.IMAGE_NAME }}:main"